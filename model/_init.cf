import ssh
import openstack
import ubuntu
import clearwater::openstack
import graph
import dns
import bind
import param
import apt
import ip
import cwdemo::forms

entity Infrastructure:
    string network_base_name
    ip::cidr network_address
    string private_domain
    string public_domain
    bool monitoring
end

openstack::Provider provider [1] -- [0:] Infrastructure infra
openstack::Project project [1] -- [0:] Infrastructure infra
openstack::Network external_network [1] -- [0:] Infrastructure infra
openstack::Subnet mgmt_subnet [1] -- [0:] Infrastructure infra

clearwater::openstack::ManagedClearWater managed_clearwater [1] -- [0:1] Infrastructure infra
ssh::Key key_pair [1] -- [0:] Infrastructure infra
ip::Host infra_hosts [0:] -- [0:1] Infrastructure infra

implement Infrastructure using infra

implementation infra for Infrastructure:
    image_id = openstack::find_image(self.provider, ubuntu::ubuntu1404)
    mgmt_flavor = openstack::find_flavor(self.provider, 1, 1)

    # Credentials
    tenant_name = param::one("tenant", "cwdemo::forms::OpenStackForm")
    self.provider = openstack::Provider(name="openstack",
                                        connection_url=param::one("connection_url", "cwdemo::forms::OpenStackForm"),
                                        username=param::one("username", "cwdemo::forms::OpenStackForm"),
                                        password=param::one("password", "cwdemo::forms::OpenStackForm"),
                                        tenant=tenant_name)
    self.project = openstack::Project(provider=self.provider, name=tenant_name,
                                      description="", enabled=true, managed=false)
    self.external_network = openstack::Network(provider=self.provider, project=self.project, external=true, managed=false,
                                               name=param::one("uplink_network", "cwdemo::forms::OpenStackForm"))

    ## OpenStack tenant network setup
    dns_server = param::one("dns_server", "cwdemo::forms::DeployFeatures")
    inmanta_net = openstack::Network(provider=provider, project=project, name=network_base_name)
    inmanta_subnet = openstack::Subnet(provider=provider, project=project, name=network_base_name, network=inmanta_net,
                                       router=router, dhcp=true, network_address=network_address,
                                       dns_servers=[dns_server])
    self.mgmt_subnet = inmanta_subnet

    router = openstack::Router(provider=provider, project=project, name=network_base_name, admin_state="up",
                               ext_gateway=external_network)

    ## Setup mgmt server
    # This server functions as a gateway to access internal servers that do not have a public ip
    sg_mgmt = openstack::SecurityGroup(provider=provider, project=project, name="cw_mgmt", description="Clearwater mgmt server")
    openstack::IPrule(group=sg_mgmt, direction="egress", ip_protocol="all", remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_mgmt, direction="ingress", ip_protocol="icmp", remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_mgmt, direction="ingress", ip_protocol="tcp", port=22, remote_prefix="0.0.0.0/0")

    mgmt_server = openstack::Host(provider=provider, project=project, name="mgmt.{{private_domain}}", flavor=mgmt_flavor,
                                  key_pair=key_pair, subnet=inmanta_subnet, image=image_id, os=ubuntu::ubuntu1404,
                                  install_agent=true)
    mgmt_server.vm.security_groups=[sg_mgmt]
    fip = openstack::FloatingIP(provider=provider, project=project, external_network=external_network,
                                port=mgmt_server.vm.eth0_port)
    dns::A(zone=private_zone, resource="{{mgmt_server.name}}.", ipaddress=mgmt_server.ip)
    std::ConfigFile(host=mgmt_server, path="/etc/resolv.conf", content=std::template("cwdemo/resolv.conf.tmpl"))
    std::ConfigFile(host=mgmt_server, path="/usr/bin/setup_live_test.sh", content=std::file("clearwater/setup_live_test.sh"),
                    mode=755)

    ## Setup DNS servers
    hostmaster="hostmaster@{{public_domain}}"

    sg_ns = openstack::SecurityGroup(provider=provider, project=project, name="cw_ns", description="Clearwater mgmt server")
    openstack::IPrule(group=sg_ns, direction="egress", ip_protocol="all", remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_ns, direction="ingress", ip_protocol="icmp", remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_ns, direction="ingress", ip_protocol="tcp", port=22, remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_ns, direction="ingress", ip_protocol="tcp", port=53, remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_ns, direction="ingress", ip_protocol="udp", port=53, remote_prefix="0.0.0.0/0")

    # ns1
    ns1_server = openstack::Host(provider=provider, project=project, name="ns-1.{{private_domain}}", flavor=mgmt_flavor,
                                 key_pair=key_pair, subnet=inmanta_subnet, image=image_id, os=ubuntu::ubuntu1404,
                                 install_agent=true)
    ns1_server.vm.security_groups=[sg_ns]
    fip_ns1 = openstack::FloatingIP(provider=provider, project=project, external_network=external_network,
                                    port=ns1_server.vm.eth0_port)
    ns1_public_ip = std::getfact(fip_ns1, "ip_address")

    dns::A(zone=private_zone, resource="{{ns1_server.name}}.", ipaddress=ns1_server.ip)
    dns::NS(zone=private_zone, server="{{ns1_server.name}}.")

    dns::A(zone=public_zone, resource="ns-1.{{public_domain}}.", ipaddress=ns1_public_ip)
    dns::NS(zone=public_zone, server="ns-1.{{public_domain}}.")

    # ns2
    ns2_server = openstack::Host(provider=provider, project=project, name="ns-2.{{private_domain}}", flavor=mgmt_flavor,
                                 key_pair=key_pair, subnet=inmanta_subnet, image=image_id, os=ubuntu::ubuntu1404,
                                 install_agent=true)
    ns2_server.vm.security_groups=[sg_ns]
    fip_ns2 = openstack::FloatingIP(provider=provider, project=project, external_network=external_network,
                                    port=ns2_server.vm.eth0_port)
    ns2_public_ip = std::getfact(fip_ns2, "ip_address")

    dns::A(zone=private_zone, resource="{{ns2_server.name}}.", ipaddress=ns2_server.ip)
    dns::NS(zone=private_zone, server="{{ns2_server.name}}.")

    dns::A(zone=public_zone, resource="ns-2.{{public_domain}}.", ipaddress=ns2_public_ip)
    dns::NS(zone=public_zone, server="ns-2.{{public_domain}}.")

    # bind
    master_ns = bind::Server(host=ns1_server, axfr_allowed=ns2_server.ip, allow_recursion=inmanta_subnet.network_address,
                             forwarders=dns_server)
    slave_ns = bind::Server(host=ns2_server, axfr_allowed=ns1_server.ip, allow_recursion=inmanta_subnet.network_address,
                             forwarders=dns_server)

    # create public and private zone
    private_zone = dns::Zone(domain=private_domain, hostmaster=hostmaster, master=master_ns, slaves=slave_ns)
    public_zone = dns::Zone(domain=public_domain, hostmaster=hostmaster, master=master_ns, slaves=slave_ns)


    # set managed clearwater relations
    self.managed_clearwater.mgmt_network = inmanta_subnet
    self.managed_clearwater.image_id = image_id
    self.managed_clearwater.flavor = openstack::find_flavor(self.provider, 2, 4)
    self.managed_clearwater.key_pair = key_pair
    self.managed_clearwater.private_domain = private_domain
    self.managed_clearwater.public_domain = public_domain
    self.managed_clearwater.external_network = external_network
    self.managed_clearwater.dns_servers = [master_ns.ipaddress, slave_ns.ipaddress]
    self.managed_clearwater.public_zone = public_zone
    self.managed_clearwater.private_zone = private_zone
    self.managed_clearwater.provider = provider
    self.managed_clearwater.project = project

    ## Report DNS and MGMT ips
    param::report("ns-1 public ip", ns1_public_ip)
    param::report("ns-2 public ip", ns2_public_ip)
    param::report("mgmt server public ip", std::getfact(fip, "ip_address"))

    # Create a list of all infrastructure hosts
    self.infra_hosts = [mgmt_server, ns1_server, ns2_server]

    # Enable or disable monitoring
    self.monitoring = param::one("monitoring", "cwdemo::forms::DeployFeatures")
end

## Misc
# Add external repo with monitoring packages
implementation monApt for std::HostConfig:
    apt::Repository(host=host, name="mon", release="/", repo="", trusted=true, base_url="https://packages.inmanta.com/repo/")
end

implement std::HostConfig using monApt

