import lma
import lma::storage::influxdb
import lma::storage::elasticsearch
import lma::metrics::telegraf
import lma::dashboards::kibana
import lma::dashboards::grafana
import lma::analytics::kapacitor
import lma::dashboards::chronograf
import lma::logs
import openstack
import param
import ubuntu
import clearwater::openstack
import clearwater::lma
import grafana
import cwdemo

implementation monitoringSetup for Infrastructure:
    ## Setup a monitor server
    sg_mon = openstack::SecurityGroup(provider=provider, project=project, name="cw_mon", description="Clearwater mon server")
    openstack::IPrule(group=sg_mon, direction="egress", ip_protocol="all", remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_mon, direction="ingress", ip_protocol="icmp", remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_mon, direction="ingress", ip_protocol="tcp", port=22, remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_mon, direction="ingress", ip_protocol="all", remote_prefix="0.0.0.0/0")

    mon_server = openstack::Host(provider=provider, project=project, name="mon.{{private_domain}}", flavor=openstack::find_flavor(self.provider, 2, 8),
                                 key_pair=key_pair, subnet=mgmt_subnet, image=self.managed_clearwater.image_id, os=ubuntu::ubuntu1404,
                                 infra=self, install_agent=true)
    mon_server.vm.security_groups=[sg_mon]

    fip = openstack::FloatingIP(provider=provider, project=project, external_network=external_network, port=mon_server.vm.eth0_port)

    monitor = lma::LMA(monitor_server=mon_server, tags=[lma::Tag(key="environment_id", value=std::environment()),
                       lma::Tag(key="environment_name", value=std::environment_name())], heka=false)
    monitor.hosts = self.managed_clearwater.hosts
    monitor.hosts = self.infra_hosts
    monitor.hosts = mon_server

    lma::storage::influxdb::Storage(monitor=monitor)
    lma::metrics::telegraf::Agent(monitor=monitor)
    lma::analytics::kapacitor::Kapacitor(monitor=monitor)
    lma::dashboards::chronograf::Dashboard(monitor=monitor)


    #lma::storage::elasticsearch::Storage(monitor=monitor)
    #lma::logs::Collector(monitor=monitor)

    # Setup kibana
    #kibana = lma::dashboards::kibana::Dashboard(monitor=monitor)
    # TODO: define kibana config from model

    # Setup Grafana
    grafana = lma::dashboards::grafana::Dashboard(monitor=monitor)

    # Load predefined dashboards
    grafana::Dashboard(server=grafana.grafana_server, name="System health", content=std::source("cwdemo/system.json"),
                       requires=grafana.grafana_server)
    grafana::Dashboard(server=grafana.grafana_server, name="Systems", content=std::source("cwdemo/sys.json"),
                       requires=grafana.grafana_server)
    grafana::Dashboard(server=grafana.grafana_server, name="VNF system health", content=std::source("cwdemo/vnf-system.json"),
                       requires=grafana.grafana_server)
    grafana::Dashboard(server=grafana.grafana_server, name="Clearwater latency", content=std::source("cwdemo/clearwater-latency.json"),
                       requires=grafana.grafana_server)

    mon_ip = std::getfact(fip, "ip_address")
    param::report("mon server public ip", mon_ip)
    param::report("grafana", "http://{{ mon_ip }}:3000")
    param::report("kibana", "http://{{ mon_ip }}:5601")

    self.managed_clearwater.sprout_instances = cwdemo::instances("http://{{ mon_ip }}:9092/kapacitor/v1/tasks/vnf_cpu_alert/scale", "sprout")
    self.managed_clearwater.bono_instances = cwdemo::instances("http://{{ mon_ip }}:9092/kapacitor/v1/tasks/vnf_cpu_alert/scale", "bono")
    self.managed_clearwater.vellum_instances = cwdemo::instances("http://{{ mon_ip }}:9092/kapacitor/v1/tasks/vnf_cpu_alert/scale", "vellum")
    self.managed_clearwater.homer_instances = cwdemo::instances("http://{{ mon_ip }}:9092/kapacitor/v1/tasks/vnf_cpu_alert/scale", "homer")
    self.managed_clearwater.dime_instances = cwdemo::instances("http://{{ mon_ip }}:9092/kapacitor/v1/tasks/vnf_cpu_alert/scale", "dime")
end

implementation defaultInstances for Infrastructure:
    self.managed_clearwater.sprout_instances = 0
    self.managed_clearwater.bono_instances = 0
    self.managed_clearwater.vellum_instances = 0
    self.managed_clearwater.homer_instances = 0
    self.managed_clearwater.dime_instances = 0
end

implement Infrastructure using monitoringSetup when monitoring
implement Infrastructure using defaultInstances when not monitoring
